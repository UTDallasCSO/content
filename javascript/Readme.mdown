__[Virtual hands-on workshop : “Enjoyable Introduction to Programming using  Drawings”](http://www.utdallas.edu/~veerasam/kajs/virutal_workshop.docx)  by Dr. Jeyakesavan Veerasamy, CS faculty,
University of Texas at Dallas, USA.__
<hr>
_While these materials have been targeted for workshops, they can certainly be used for self-paced learning from your home as well. Just that it can be more enjoyable experience if you have at least a partner to discuss and exchange ideas! Some background in programming concepts will enable you to enjoy the material – so I recommend you to complete Alice workshop first._

* Start the workshop with one of the shows in following directory – click on any showX.html (press F11 and go full-screen for the full effect!): http://www.utdallas.edu/~jeyv/KAJS/shows
* All with just ~20 lines of code in Processing.js that contain a few simple math equations!
* Math is beautiful :-) You will understand the code behind these images in this workshop, then you can write your own code & generate your own dazzling images!

Description | Materials/Images
---- | ---- 
KhanAcademy-JavaScript installation and lab setup – There is no software to download and install, since JavaScript is interpreted by the browser. Mozilla Firefox is the officially “tested” browser – Google Chrome may work too, but it is not fully tested for the examples given below. We need Internet connection to access Khan Academy site just to get started, then we can work locally as long as you don’t click on Khan Academy examples. | 
Why does it make sense to go through this Drawings workshop? (Why not learn C/C++/Java directly?) | [PPT](http://www.utdallas.edu/~veerasam/kajs/why_alice_first.pptx)/[PDF](http://www.utdallas.edu/~veerasam/kajs/why_alice_first.pdf)
Welcome to Drawings workshop! Here are a few suggestions to get the maximum value from this workshop. We will cycle through 3 modes for each topic/example: Watching, Doing it individually, helping each other to complete and work on something extra. You can use www.online-stopwatch.com to make sure that the workshop is progressing in timely manner. |
Core programming concepts – Sequence, selection and repetition are 3 pillars of programming! | [Flash](http://www.utdallas.edu/~veerasam/kajs/programming_basics.swf)/[YouTube](http://www.youtube.com/watch?v=Ww7UJCUm9IE), [PPT](http://www.utdallas.edu/~veerasam/kajs/Programming_Basics.PPTX)/[PDF](http://www.utdallas.edu/~veerasam/kajs/Programming_Basics.pdf)
Introduction to KhanAcademy-JavaScript environment – www.khanacademy.org/cs - Visual Programming – free-form typing – you can see the output immediately or with one-click. | ![Intro1](http://www.utdallas.edu/~veerasam/kajs/index_files/image002.jpg) ![Intro2](http://www.utdallas.edu/~veerasam/kajs/index_files/image002.jpg)
Fun with examples: Click on All Programs or click here www.khanacademy.org/cs/browse/all-programs to go there directly. Scroll down and click on a few interest ones and have fun! After completing this workshop, you can generate similar or even better images! | 
Goto https://www.khanacademy.org/cs/programming: Review all the tutorials listed under first 2 headings: Intro to programming Drawing basics |

Assignment | Topic | Materials
---- | ---- | ----
1: | Draw a nice house! | Documentation: Click on Documentation or click here www.khanacademy.org/cs/docs  & processingjs.org/reference. Each API comes with a sample usage too.
 | Goto https://www.khanacademy.org/cs/programming: Review all the tutorials listed under Coloring Video: Draw a ellipse with random size & random color! Documentation: [random()](http://www.khanacademy.org/cs/randomlow-high/827911487) | `noStroke(); fill(random(0,255),random(0,255), random(0,255)); ellipse(random(0,400), random(0,400), random(0,100), random(0,100));`
 | You can comment out individual lines with // and multiple lines with /* ... */
 | Also, what happens if these lines are out of order? Try it! | 
  | How to restrict to circles? See the power of variable! | `noStroke(); fill(random(0,255),random(0,255), random(0,255)); var diameter = random(0,100); ellipse(random(0,400), random(0,400), diameter, diameter);`
  | Alternate way to draw the circle! | `stroke(random(0,255),random(0,255), random(0,255));strokeWeight(random(0,100)); point(random(0,400), random(0,400));`
2: | Add a random square! Unlike ellipse(), x and y parameters in rect() indicate the top, left corner. | 
 | make the circle appear fully inside the canvas area. In other words, we want to ensure that the circles are never cut off at the edges. Idea is to push the circle in if it is too close to the boundaries. Realize the power of IF statements! | `noStroke(); fill(random(0,255),random(0,255), random(0,255)); var dia = random(0,200); var x = random(0,400);  var y = random(0,400); var rad = dia / 2; if (x < rad) {x = rad;} if (x > 400 - rad) { x = 400 - rad;} if (y < rad) { y = rad; }if (y > 400 - rad) {y = 400 - rad;} ellipse(x, y, dia, dia);`
 | Extra: What are the code changes if you want to do the same for ellipses? Alternate approach: Both Software Engineering perfectionists and Mathematicians make like the following one better! Why? | `noStroke(); fill(random(0,255),random(0,255), random(0,255)); var dia = random(0,200); var rad = dia / 2; var x = random(rad,400-rad); var y = random(rad,400-rad); ellipse(x, y, dia, dia);`
3: | Make your square to appear within the canvas area too – let us go one step further – let us avoid the edges all-together – make the squares appear within the rectangular area of (10,10) to (390,390). Extra: What if we want to do the same for any rectangle?
 | For loops: Video: Draw 10 random circles! | `for(var i=0 ; i<10 ; i++) {stroke(random(0,255),random(0,255), random(0,255)); strokeWeight(random(0,100)); point(random(0,400), random(0,400)); }` Now, click near 10 and drag the mouse left or right. What happens?
4: | Draw 10 concentric randomly colored circles. What does “concentric” mean? Will you draw in the order of small to large circles, or other way around? Extra: Define a variable n at the top and write the generic code to draw n concentric circles instead. var n=10;... Change n by clicking near 10 and dragging mouse left or right. Does your code work properly? | ![concentric circles](http://www.utdallas.edu/~veerasam/kajs/index_files/image014.jpg)
 | With random colors: `noStroke(); for (var i = 10; i > 0; i--) {fill(random(0,255),random(0,255), random(0,255)); ellipse(200, 200, i * 20, i * 40); ellipse(200, 200, i * 40, i * 20); }` With a color pattern: `noStroke(); for (var i = 10; i > 0; i--) {fill(i*25,50,(10-i)*25); ellipse(200, 200, i * 20, i * 40); ellipse(200, 200, i * 40, i * 20); }` | ![pattern1](http://www.utdallas.edu/~veerasam/kajs/index_files/image016.jpg) ![pattern2](http://www.utdallas.edu/~veerasam/kajs/index_files/image018.jpg)
 5. | Assignment 5: Adjust the color pattern to use a loop of 20, then change the color pattern such that Green color appears in the middle as shown in the image. Extra: Can you make it perfect Green in the middle? | ![pattern3](http://www.utdallas.edu/~veerasam/kajs/index_files/image020.jpg)
 6. | With n specified at the top, how will you generate n x n equally distributed circles? Keep 50 as the default diameter size for circles, but reduce as needed to avoid overlapping with other circles. Take it easy & draw just one line of n equally distributed circles first, then expand it to n x n circles. Extra: How to draw circles in diamond formation? Middle row should have n circles, adjacent rows should have (n-2) circles, their adjacent rows should have (n-4) circles, so on. Top and bottom rows should have only 1 or 2 circles in the middle | ![iamge1](http://www.utdallas.edu/~veerasam/kajs/index_files/image022.jpg) ![image2](http://www.utdallas.edu/~veerasam/kajs/index_files/image024.jpg) ![image3](http://www.utdallas.edu/~veerasam/kajs/index_files/image026.jpg)
 7. | Play time! Use these code segments indvidually to learn about the behavior of translate(), rotate() and scale() – replace A,B,C and D with various values and try to understand the results! `fill(255,0,0); ellipse(100,100,50,50); translate(A,B); ellipse(100,100,50,50); translate(C,D); ellipse(100,100,50,50); angleMode = "degrees"; fill(255,0,0); translate(200,200); ellipse(100,100,50,50); rotate(A); ellipse(100,100,50,50); angleMode = "degrees"; fill(255,0,0); translate(200,200); ellipse(100,100,50,50); scale(B, C); ellipse(100,100,50,50);`
 8. | Now, try to use rotate() and scale() together. Add for loop & random fill color, then adjust the angle – that will take you to artistic creations shown below! Video: Drawing Bonus: Rotation! www.khanacademy.org/cs/drawing-bonus-rotation/906448125 Warning: Sometimes, browsers’ default setting of degrees vs. radians is unpredictable. You may want to add a line angleMode = "degrees"; to the top of your program if you want the angles to be specified in degrees. Also, you can use the following line to use radians instead (note: 360 degrees = 2 * PI radians): angleMode = "radians"; This setting affects the behavior of rotate(), sin(), cos(), tan(), etc.