### Day 5 - We create some games today!

Assignment | Topic | Materials
---- | ---- | ----
14. | Recursion is an advanced concept in Computer Science. Beginners are welcome to skip this portion! You can always come back later to tackle whenever you want... Growing squares at corners: functions with parameters & recursion Recursive functions are unique – they invoke themselves in the body of the function. In the following code, drawSquare() is invoked 4 times within drawSquare() itself. That sounds like a formula for trouble, right? If we are not careful, infinite recursion can occur & programs can get stuck or crash. We control the recursion depth. | `noStroke(); var drawSquare = function(level, x, y, len) { fill(x, len, y); rect(x, y, len, len); if (level > 0) { drawSquare(level-1, x-len/2, y-len/2, len/2); drawSquare(level-1, x+len, y-len/2, len/2); drawSquare(level-1, x-len/2, y+len, len/2); drawSquare(level-1, x+len, y+len, len/2); } }; drawSquare(8, 150, 150, 100); Growing triangles at corners: functions with parameters & recursion var drawTriangle = function(level, x1, y1, x2, y2, x3, y3) { fill(x1, y1, x2-y2); strokeWeight(level+1); triangle(x1, y1, x2, y2, x3, y3); if (level > 0) { drawTriangle(level-1, x1, y1, x1-(x2-x1)/2, y1-(y2-y1)/2, x1-(x3-x1)/2, y1-(y3-y1)/2); drawTriangle(level-1, x2, y2, x2-(x1-x2)/2, y2-(y1-y2)/2, x2-(x3-x2)/2, y2-(y3-y2)/2); drawTriangle(level-1, x3, y3, x3-(x1-x3)/2, y3-(y1-y3)/2, x3-(x2-x3)/2, y3-(y2-y3)/2); } }; drawTriangle(5, 200, 125, 125, 250, 275, 250); Growing circles at corners: functions with parameters & recursion noStroke(); var drawCircle = function(level, x, y, len) { fill(128+127*sin(x*(level+1)), 128+127*cos(len*(level+1)), 128+127*sin(y*(level+1))); ellipse(x, y, len, len); if (level > 0) { drawCircle(level-1, x-len/2, y-len/2, len/2); drawCircle(level-1, x+len/2, y-len/2, len/2); drawCircle(level-1, x-len/2, y+len/2, len/2); drawCircle(level-1, x+len/2, y+len/2, len/2); } }; drawCircle(3, 200, 200, 200);` | ![image](http://www.utdallas.edu/~veerasam/kajs/index_files/image058.jpg)
15. | draw() – KAJS environment invokes draw() repeatedly & automatically forever. Tutorial: Animation www.khanacademy.org/cs/intro-to-animation/830742281 Assignment 9: Make the car go back and forth. Here is the start-up code: `var drawCar = function(x, y) { noStroke(); // draw the car body fill(255, 0, 115); rect(x, y, 100, 20); rect(x + 15, y-22, 70, 40); // draw the wheels fill(77, 66, 66); ellipse(x + 25, y+21, 24, 24); ellipse(x + 75, y+21, 24, 24); }; var x = 10; var draw = function() { drawCar(x, 200); };`
16. | Make the ball bounce around all 4 walls. Also, change color and speed with each bounce. Here is the start-up code: `// position of the ball var x = 50; // how far the ball moves every time var speed = 3; var draw = function() { background(202, 255, 97); fill(66, 66, 66); ellipse(x, 200, 50, 50); // move the ball x = x + speed; };` Extra: introduce random speed when ball bounces off the walls, also change color too!
16. | `var sz = 50; var limit = 400; translate(200,200); var draw = function() { ellipse(0,0,sz,sz); sz += 5; if (sz > limit) { sz = 50; limit -= 25; } }; Same using squares: var sz = 50; var limit = 400; translate(200,200); var draw = function() { rect(-sz/2,-sz/2,sz,sz); sz += 5; if (sz > limit) { sz = 50; limit -= 25; } };` | ![images](http://www.utdallas.edu/~veerasam/kajs/index_files/image068.jpg) ![image2](http://www.utdallas.edu/~veerasam/kajs/index_files/image070.jpg)
17. | Make the expanding circles/squares start with a different color each time. Remove the border black lines too. | ![images](http://www.utdallas.edu/~veerasam/kajs/index_files/image072.jpg) ![image2](http://www.utdallas.edu/~veerasam/kajs/index_files/image074.jpg)
18. | Slide show of wonderful images! You can replace the code in drawIteration() with any code that we have seen for various artistic creations... `noStroke(); var angle = 1; var drawIteration = function() { translate(200,200); for (var i = 1000; i > 0; i--) { fill(sin(i*2)*128+128, sin(4*i)*128+128, sin(6*i)*128+128); ellipse(200,200,100,400); scale(0.995,0.995); rotate(angle); } }; var counter = 0; var draw = function() { counter++; if (counter > 25) { counter = 0; background(0, 0, 0); angle++; resetMatrix(); drawIteration(); } };`
19. | Converting for loop to use `draw(): stroke(random(0,255),random(0,255), random(0,255)); translate(50,100); for(var i=0 ; i<100 ; i++) { line(0,0,300,0); translate(300,0); rotate(121); }` can be re-written with draw() function. To avoid endless drawings, let us use mouseIsPressed flag (you need to press the mouse in the canvas area to draw) – this enables us to stop the drawing at any time! Since the drawing matrix is reset every time before invoking draw(), I threw in pushMatrix() just to try – that made it work properly! `translate(50,100); stroke(random(0,255),random(0,255), random(0,255)); var draw = function() { if (mouseIsPressed) { line(0,0,300,0); translate(300,0); rotate(121); pushMatrix(); } };` Discussion: why rotate(121) degrees? | ![image2](http://www.utdallas.edu/~veerasam/kajs/index_files/image076.jpg)
20. | mouseX and mouseY are global variables that track the position of the mouse. Come up with a mechanism for the brush color to change slowly over time.
21. | mouseX and mouseY are global variables that track the position of the mouse. Here is the code to draw random colored circle wherever mouse is clicked or pressed and dragged. `var draw = function() { if (mouseIsPressed) { stroke(random(0,255), random(0,255), random(0,255)); strokeWeight(random(0,50)); point(mouseX, mouseY); } };` Open-ended Assignment 12: Try to draw a human face or necklace or your favorite one :-) Now, put your thinking cap ON, close your eyes, let your creativity run wild and think for a few minutes about what you can do with a magical brush & build something that is awesome! | ![image](http://www.utdallas.edu/~veerasam/kajs/index_files/image078.jpg)
22. | Play with sin() wave: Keep track of the total angle is another approach to get around “drawing matrix reset” issue associated with draw(). `translate(200,200); var angle = 0; var m = 4; var draw = function() { rotate(angle); stroke(random(0,255), random(0,255), random(0,255)); line(0,0,75+75*sin(m*angle),0); angle+= 0.5; };` Does the output make sense? Change the multiplication factor m to some other value and see what happens. | ![image](http://www.utdallas.edu/~veerasam/kajs/index_files/image080.jpg)
23. | Endless distribution of playing cards! Card size gets smaller, then gets bigger, then smaller again, bigger again ... `strokeWeight(2); translate(200,200); var y = 200; var dir = 1; var len = 1; var angle = 10; var draw = function() { fill(random(0,255), random(0, 255), random(0,255)); rotate(angle); rect(len, 0, y / 2, y); y -= dir; angle+= 10; if (y < 20) { dir = -1; } if (y > 200) { dir = 1; } };` Extra: How about slow color change, instead of random colors? | ![image](http://www.utdallas.edu/~veerasam/kajs/index_files/image082.jpg)
24. |  `noStroke(); translate(200,200); var y = 200; var dir = 1; var len = 500; var angle = 0; var draw = function() { fill(random(0,255), random(0, 255), random(0,255)); rotate(angle); rect(-len, -len, 2*len, 2*len); y -= dir; angle+= 5; len /= 1.1; };` | ![image3](http://www.utdallas.edu/~veerasam/kajs/index_files/image084.jpg) ![image4](http://www.utdallas.edu/~veerasam/kajs/index_files/image086.jpg)
25. | Make the ball pick-up speed every time when it hits the paddle. Another option is to select a random speed within a range when the ball hits the paddle and bounces. What is a game without the score? Define a variable score and come up with a meaningful mechanism to incremenet it & reset it, then use the following code add the score in the bottom. rect(100,360,200,40); textSize(40); fill(0,0,0); text(score,150,395); | ![images2](http://www.utdallas.edu/~veerasam/kajs/index_files/image096.jpg)
26. | `strokeWeight(2); translate(200,200); point(0,0); var sz = 1; var len = 10; var angle = 10; var draw = function() { rotate(angle*180/PI); fill(random(0,255), random(0,255), random(0,255)); ellipse(len, 0, sz % 10 + 10, sz % 10 + 5); angle++; len++; sz += 1; };` Following variation shows endless collection of coins! Use strokeWeight(2) instead of noStroke() to see another interesting effect. `translate(200,200); var sz = 1; noStroke(); var drawPebbles = function(x) { var len = 10; rotate(x); for(var i=0 ; i<500;i++) { rotate(1); fill(random(0,255), random(0,255), random(0,255)); ellipse(len, 0, sz % 10 + 10, sz % 10 + 5); len++; sz += 1; } }; var x = 1; var draw = function() { x++; drawPebbles(x); };` | ![stars](http://www.utdallas.edu/~veerasam/kajs/index_files/image102.jpg)
27. | Multiple balls bouncing off all 4 walls. Let us use different color for each ball. That means, we need to remember the colors. That is where arrays come in. Here is sample code to use arrays – it generates and stores 10 random colors, then randomly selects one color from that list. `var colors = []; for(var i=0; i<10 ; i++) { colors.push(color(random(0,255),random(0,255), random(0,255))); } fill(colors[random(0,10)]);` Extra: For more complexity, balls can bounce off each other too! But which direction each ball should go?
28. | Generate Texas Lotto numbers – we need to generate 6 unique numbers between 1 and 50. You can use the following code to output the values: textSize(40); text(value, x, y); Does your program scale up easily if we want to generate 20 unique numbers between 1 and 1000. That is why, we like to write the code as generic as possible – so that future modifications/expansions will be as easy as possible.
29. | Paddle ball game using 2 balls. | ![images1](http://www.utdallas.edu/~veerasam/kajs/index_files/image104.jpg)
30. | How long can you keep the balls in the air? Press on each air-blower to push the ball up! Game ends whenever any ball touches the air-blower. If possible, do realistic ball movements - change the gravity settings and see the effect! | ![images](http://www.utdallas.edu/~veerasam/kajs/index_files/image106.jpg)
31. | “Hit-the-heads” game: Images randomly replace circles which are arranged in matrix format. Score should reflect the user’s response speed, negative points for clicking on circles. Read the documentation on image(myImage, x, y); [www.khanacademy.org/cs/imageimage-x-y/937672662](www.khanacademy.org/cs/imageimage-x-y/937672662)
