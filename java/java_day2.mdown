### Day 2
* [Introducing variables, primitive data types and Operators](#introducing-variables-primitive data-types-and-operators)
* [Program Control Statements](#program-control-statements)

Before starting the session, suggest that students create a dummy class that will house almost all of the codes that we write in class today. There will be a lot of code and writing the class declarations and main methods again and again is a tedious job.

You may also include OOPs concepts here and suggest to create new class files for each classes and then simply call those functions from a single main method containing class file when needed.

```java
public class Solution{

    public static void main(String[] args){

    }
}
```

#### Introducing variables, primitive data types and Operators

#### Variables

A variable provides us with named storage that our programs can manipulate.
Each variable in Java has a specific type, which determines the size and layout of the variable's memory
and the range of values that can be stored within that memory.

There are different types of variables in Java. They are as follows:
* __Instance Variables (Non-Static Fields)__:
Non-static fields are also known as instance variables because their values are unique to each instance of a class.
Example code to illustrate:
```java
class Hello{
    public static class car{
        static int wheels = 4;
    }
    public static class cycle{
        static int wheels = 2;
    }
    public static void main(String[] args){
        System.out.println("Wheels on cars "+car.wheels);
        System.out.print("Wheels on cycles "+cycle.wheels);

    }
}
```
* __Class Variables (Static Fields)__:
A class variable is any field declared with the static modifier. This tells the compiler that there is exactly one copy of this variable in existence, regardless of how many times the class has been instantiated.
A field defining the number of gears for a particular kind of bicycle could be marked as static since, conceptually, the same number of gears will apply to all instances.
The code `static int numGears = 6;` would create such a static field.
```java
class Cycle{
    public static int numGears = 60000;
    public static String name = "FancyName";

    // Class Constructor
    Cycle(String model, int gears){
        this.name = model;
        this.numGears = gears;
    }
    // Method to print the name of the cycle and the num of gears it has.
    public void gearNums(){
        System.out.println("No. of gears for "+name+" cycle are "+numGears);
    }
    // Why does this code give the output that it does?
    public static void main(String[] args){
        Cycle firstCycle = new Cycle("RedCycle", 12);
        Cycle twoCycle = new Cycle("BlueCycle", 18);

        firstCycle.gearNums();  // Expected output : RedCycle 12
        twoCycle.gearNums();    // Expected output : BlueCycle 18

    }
}
```

* __Local Variables__:
A method stores its temporary state in local variables. The syntax for declaring a local variable is similar to declaring a field (for example, `int count = 0;`).
There is no special keyword designating a variable as local; that determination comes entirely from the location in which the variable is declaredâ€”between the opening and closing braces of a method.
As such, local variables are only visible to the methods in which they are declared; they are not accessible from the rest of the class.

* Parameters Variables__:
Recall that the signature for the main method is `public static void main(String[] args`).
Here, the `args` variable is the parameter to this method. The important thing to remember is that parameters are always classified as "variables" not "fields".

### Primitive Data Types

The Java programming language is statically-typed, which means that all variables must first be declared before they can be used.
This involves stating the variable's type and name, and is as follows:

`int gear = 1;`

Doing so tells your program that a field named "gear" exists, holds numerical data, and has an initial value of "1".
A variable's data type determines the values it may contain, plus the operations that may be performed on it.
In addition to int, the Java programming language supports seven other primitive data types.
A primitive type is predefined by the language and is named by a reserved keyword.
The eight primitive data types supported by the Java programming language are: byte, short, int, long, float, double, boolean, char.
In addition to the eight primitive data types listed above, the Java programming language also provides special support for character
strings via the java.lang.String class. Enclosing your character string within double quotes will automatically create a new String
object. For example, `String s = "this is a string";`. The String class is not technically a primitive data type, but considering the
special support given to it by the language.

The following tables defines the default values of the primitive data types.

Data Type | Default Value (for fields)
---- | ----
byte	|	0
short	|	0
int		|   0
long	|	0L
float	|	0.0f
double	|	0.0d
char	|	'\u0000'
String (or any object) | 	null
boolean	|	false


###Operators
After we declare and initialize variables, you probably want to know how to do something with them.
Operators are special symbols that perform specific operations on one, two, or three operands, and then return a result.

Java operators include, assignment(=), arithmatic(+,-,\* ,/,%), unary(+,-,++,--,!), equality and rational (==, !=, >, >=, <, <=),
conditional(&&, ||), bitwise(&, |, ^) and bit shift(<<, >>, >>>) operators.

All these operators work on the basis of precedence. The operators in the following table are listed according to precedence order.

Operators	| Precedence
---- | ----
postfix	|	expr++ expr--
unary	|	++expr --expr +expr -expr ~ !
multiplicative |	* / %
additive	| + -
shift	|	<< >> >>>
relational	| < > <= >= instanceof
equality |	== !=
bitwise | AND	&
bitwise | exclusive OR	^
bitwise | inclusive OR \|
logical | AND	&&
logical | OR	\|\|
ternary	|	? :
assignment	| = += -= *= /= %= &= ^= \|= <<= >>= >>>=

#### Program Control Statements
